#!/bin/bash

#
# Copyright (C) 2018 Heinrich-Heine-Universitaet Duesseldorf, Institute of Computer Science, Department Operating Systems
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# Include guard
if [ "$__CDEPL_APP_ZOOKEEPER_INCLUDED" ]; then
    return
fi

__CDEPL_APP_ZOOKEEPER_INCLUDED="1"

__ZOOKEEPER_PATH=""
__ZOOKEEPER_OUT_PATH=""
__ZOOKEEPER_DATA_DIR=""

readonly __ZOOKEEPER_LOG_FILE_POSTFIX="_server"
readonly __ZOOKEEPER_LOG_FILE_CLIENT_POSTFIX="_client"
readonly __ZOOKEEPER_CONF_FILE="conf/zoo.cfg"
readonly __ZOOKEEPER_DATA_DIR_REGEX="dataDir=([^[:space:]]+)"

readonly __ZOOKEEPER_REQUIRED_ENVIRONMENT="java/1.8"

cdepl_app_zookeeper_init()
{
	local path=$1

	__ZOOKEEPER_PATH="$(cdepl_cluster_node_cmd 0 "readlink -f $path")"
	__ZOOKEEPER_OUT_PATH="$(cdepl_run_get_cur_out_path)/zookeeper"

	if [ ! "$__ZOOKEEPER_PATH" ] || [ "$(cdepl_cluster_file_system_cmd "[ -d $__ZOOKEEPER_PATH ] && echo \"1\"")" != "1" ]; then
		util_log_error "[zookeeper]: Path does not exist ($path), resolved path: $__ZOOKEEPER_PATH"
		return
	fi

	local config=$(cdepl_cluster_node_cmd "0" "cat $__ZOOKEEPER_PATH/$__ZOOKEEPER_CONF_FILE")

	if [[ $config =~ $__ZOOKEEPER_DATA_DIR_REGEX ]]
	then
		__ZOOKEEPER_DATA_DIR=${BASH_REMATCH[1]}
	else
		util_log_error "[zookeeper]: Could not read zookeeper data directory from configuration file"
		return
	fi

	util_log "[zookeeper] Initialized: $__ZOOKEEPER_PATH"
	util_log "[zookeeper] Output: $__ZOOKEEPER_OUT_PATH"
}

##
# Start a zookeeper (server) instance on the target node.
#
# $1 node Target node id
# $2 port Port for the server instance to use
##
cdepl_app_zookeeper_start()
{
	local node=$1
	local port=$2

	local logfile=${__ZOOKEEPER_OUT_PATH}/node${node}${__ZOOKEEPER_LOG_FILE_POSTFIX}

	# Delete Zookeeper's previous data directory
	util_log "[$node][zookeeper] Deleting zookeeper data directory"
	cdepl_cluster_node_cmd "$node" "rm -rf $__ZOOKEEPER_DATA_DIR"

	util_log "[$node][zookeeper] Starting, logfile: $logfile"

	cdepl_cluster_node_cmd "$node" "mkdir -p $__ZOOKEEPER_OUT_PATH"
	# Go to zookeeper out dir before execution to get all output, zookeeper
	# data dir if relative path and zookeeper.out folder in the same dir
	cdepl_cluster_node_cmd "$node" "sed -i -e \"s/clientPort=[0-9]*/clientPort=$port/g\" \"${__ZOOKEEPER_PATH}/conf/zoo.cfg\" && ZOO_LOG_DIR=${__ZOOKEEPER_OUT_PATH} ${__ZOOKEEPER_PATH}/bin/zkServer.sh start ${__ZOOKEEPER_PATH}/conf/zoo.cfg >> $logfile 2>&1" "$__ZOOKEEPER_REQUIRED_ENVIRONMENT"

	if [ "$?" != "0" ]; then
		util_log_error "[$node][zookeeper] Starting failed, also check logfile $logfile"
		return
	fi
}

##
# Remove a path from a running zookeeper (server) instance
#
# $1 node Target node id with running zookeeper (server) instance
# $2 path Path to remove stored in zookeeper
##
cdepl_app_zookeeper_remove()
{
	local node=$1
	local path=$2

	local logfile=${__ZOOKEEPER_OUT_PATH}/node${node}${__ZOOKEEPER_LOG_FILE_CLIENT_POSTFIX}

	util_log "[$node][zookeeper] Remove path $path"

	cdepl_cluster_node_cmd "$node" "echo \"rmr ${path}\" | ${__ZOOKEEPER_PATH}/bin/zkCli.sh >> $logfile 2>&1" "$__ZOOKEEPER_REQUIRED_ENVIRONMENT"
}

##
# For for a started zookeeper (server) instance to be started
#
# $1 node Target node id with started zookeeper (server) instance
##
cdepl_app_zookeeper_wait_started()
{
	local node=$1

	local logfile=${__ZOOKEEPER_OUT_PATH}/node${node}${__ZOOKEEPER_LOG_FILE_POSTFIX}
	#local logfile_client=${__ZOOKEEPER_OUT_PATH}/node${node}${__ZOOKEEPER_LOG_FILE_CLIENT_POSTFIX}

	util_log "[$node][zookeeper] Waiting for startup"
	local pid
	while true; do
		echo -n "."

		local success_started=$(cdepl_cluster_node_cmd "$node" "cat '$logfile' 2> /dev/null | grep 'STARTED'")
		local success_running=$(cdepl_cluster_node_cmd "$node" "cat '$logfile' 2> /dev/null | grep 'already running'")
		local fail_file=$(cdepl_cluster_node_cmd "$node" "cat '$logfile' 2> /dev/null | grep 'No such file or directory'")
		local fail_pid=$(cdepl_cluster_node_cmd "$node" "cat '$logfile' 2> /dev/null | grep 'FAILED TO WRITE PID'")
		local fail_started=$(cdepl_cluster_node_cmd "$node" "cat '$logfile' 2> /dev/null | grep 'SERVER DID NOT START'")

		if [ "$success_started" != "" ] || [ "$success_running" != "" ]; then

			local pid=$(cdepl_cluster_node_cmd "$node" "pgrep -f 'java -Dzookeeper.log.dir'")

			echo ""

			if [ "$pid" = "" ]; then
				util_log_error "[$node][zookeeper] Could not find started process"
				return
			fi

			util_log "[$node][zookeeper] Started (pid: $pid)"

			break
		elif [ "$fail_file" != "" ] || [ "$fail_pid" != "" ] || [ "$fail_started" != "" ] ; then
			echo ""
			util_log_error "[$node][zookeeper] Could not be started. See log file $logfile"
			return
		fi

		sleep 1.0
	done
}

##
# Cleanup any still running or remaining/crashed instances on the target node
#
# $1 Target node id (or start node id of range if second parameter provided)
# $2 Optional: Node id range end (including) and first parameter is interpreted
#    as range start (including)
##
cdepl_app_zookeeper_cleanup()
{
	local node_range_start=$1
	local node_range_end=$2

	if [ "$node_range_end" ]; then
		local pids=""

		for node in $(seq "$node_range_start" "$node_range_end"); do
			__cdepl_app_zookeeper_cleanup "$node" &
			pids="$pids $!"
		done

		wait $pids
	else
		__cdepl_app_zookeeper_cleanup "$node_range_start"
	fi
}

__cdepl_app_zookeeper_get_instance_running_pid()
{
	local node=$1

	cdepl_cluster_node_cmd "$node" "pgrep -f 'java -Dzookeeper.log.dir'"
}

__cdepl_app_zookeeper_cleanup()
{
	local node=$1

	util_log "[$node][zookeeper] Cleanup..."

	local pid=$(__cdepl_app_zookeeper_get_instance_running_pid "$node")

	local kill_binary=$(which kill)

	if [ "$pid" ]; then
		# If we or someone else left some garbage processes on the node multiple
		# pids are returned
		for i in $pid; do
			local kill_out=$(cdepl_cluster_node_cmd "$node" "$kill_binary -9 $i 2>&1")

			if [ "$?" = "0" ]; then
				util_log "[$node][zookeeper] Killed (pid: $i)"
			elif [ "$kill_out" ]; then
				# Probably operation not permitted, try root
				cdepl_cluster_node_cmd "$node" "sudo -P $kill_binary -9 $i > /dev/null 2>&1"

				if [ "$?" = "0" ]; then
					util_log "[$node][zookeeper] Killed (root) (pid: $i)"
				elif [ "$?" != "1" ]; then
					util_log_warn "[$node][zookeeper] Killing (root) $i failed, ZooKeeper instance(s) might stay alive"
				fi
			elif [ "$?" != "1" ]; then
				util_log_warn "[$node][zookeeper] Killing $i failed, DXRAM instance(s) might stay alive"
			fi
		done
	fi
}
